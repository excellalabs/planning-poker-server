
import { ObjectID } from 'mongodb'
import { getCollection } from '../../db'
import { DbService } from '../common/common.service'
import { PaginationData } from '../common/common.types'

import { <%= capitalName %>NotFoundError, CannotEdit<%= capitalName %>Error } from './<%= name %>.errors'
import { <%= capitalName %>, Create<%= capitalName %>Request, Update<%= capitalName %>Request } from './<%= name %>.types'

export class <%= capitalName %>Service extends DbService<<%= capitalName %>> {
  constructor (
    collection = getCollection<<%= capitalName %>>('<%= name %>s'),
  ) {
    super(collection)
  }

  static instance = new <%= capitalName %>Service()

  async findAll (pagination?: PaginationData): Promise<<%= capitalName %>[]> {
    const <%= name %>s = await this.paginate(
      this.collection.find(),
      pagination,
    )
    return <%= name %>s
  }

  async findAllBy<%= capitalName %>er (userId: ObjectID, pagination?: PaginationData): Promise<<%= capitalName %>[]> {
    const <%= name %>s = await this.paginate(
      this.collection.find({ userId }),
      pagination,
    )
    return <%= name %>s
  }

  async findById (_id: ObjectID): Promise<<%= capitalName %> | null> {
    const <%= name %> = await this.collection.findOne({ _id })
    return <%= name %>
  }

  async findById$ (_id: ObjectID): Promise<<%= capitalName %>> {
    const <%= name %> = await this.findById(_id)
    if (<%= name %> === null) {
      throw new <%= capitalName %>NotFoundError({ _id })
    }

    return <%= name %>
  }

  async create<%= capitalName %> (userId: ObjectID, { content }: Create<%= capitalName %>Request): Promise<<%= capitalName %>> {
    const <%= name %>: <%= capitalName %> = {
      content,
      userId,
    }

    const result = await this.collection.insertOne(<%= name %>)
    if (result.insertedCount < 1) {
      throw new Error(`<%= capitalName %> was not created correctly!`)
    }

    return {
      ...<%= name %>,
      _id: result.insertedId,
    }
  }

  async update<%= capitalName %> (userId: ObjectID, { <%= name %>Id, data }: Update<%= capitalName %>Request): Promise<<%= capitalName %>> {
    const existing<%= capitalName %> = await this.findById$(<%= name %>Id)
    if (!existing<%= capitalName %>.userId.equals(userId)) {
      throw new CannotEdit<%= capitalName %>Error()
    }

    const result = await this.collection.findOneAndUpdate(
      { _id: <%= name %>Id, userId },
      { $set: data },
      { returnOriginal: false },
    )

    return result.value!
  }
}
